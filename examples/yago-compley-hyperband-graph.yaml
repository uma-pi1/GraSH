job:
  device: cuda
  type: search
  auto_correct: true    
  
random_seed:
  numpy: 0
  python: 0
  torch: 0
  
dataset:
  name: yago3-10
  pickle: false  

model: complex

train:
  split: train
  type: negative_sampling
  loss: kl
  loss_arg: 1.0
  max_epochs: 5
  batch_size: 1024  
  num_workers: 0  
  optimizer: Adagrad
  optimizer_args:
    +++: +++
  lr_scheduler: ''  
  trace_level: epoch  
  checkpoint:
    every: 0
    keep: 0
  abort_on_nan: true
  pin_memory: false
  visualize_graph: false

negative_sampling:
  class_name: TrainingJobNegativeSampling
  sampling_type: uniform  
  frequency:
    smoothing: 1  
  num_samples:
    o: -1
    p: 0
    s: 3  
  filtering:
    implementation: fast_if_available
    o: false
    p: false
    s: false
    split: ''  
  shared: true  
  with_replacement: false
  implementation: batch

eval:
  split: valid
  type: entity_ranking
  batch_size: 128
  trace_level: epoch
  num_workers: 0
  pin_memory: false
  
valid:
  split: valid
  every: 5
  metric: mean_reciprocal_rank_filtered
  metric_expr: float("nan")
  #early_stopping:
  #  patience: 0
  #  threshold:
  #    epochs: 0
  #    metric_value: 0.0  
  early_stopping:
    patience: 50
    threshold:
      epochs: 10
      metric_value: 0.05  
  trace_level: epoch 
  
entity_ranking:
  class_name: EntityRankingJob
  filter_splits: ['train', 'valid']
  filter_with_test: true
  hits_at_k_s: [1, 3, 10, 50, 100, 200, 300, 400, 500, 1000]
  chunk_size: 50000
  metrics_per:
    head_and_tail: true
    relation_type: false
    argument_frequency: false

search:
  device_pool:
  - cuda:0
  - cuda:1
  - cuda:2
  - cuda:3
  type: hyperband_search
  num_workers: 1
  on_error: abort

hyperband_search:
  run_id: 'hpb-yago-example'
  host: '127.0.0.2'
  port: "None"
  seed: 2
  cost_metric: 'triples'
  num_workers: 1
  num_trials: 16
  search_budget: 3
  eta: 4
  variant: 'graph'
  num_hpb_iter: 1
  parameters:
  - bounds:
    - 0.0003
    - 1.0
    log_scale: true
    name: train.optimizer_args.lr
    type: range
  - name: lookup_embedder.initialize
    type: choice
    values:
    - xavier_normal_
    - xavier_uniform_
    - normal_
    - uniform_
  - bounds:
    - 1.0e-05
    - 1.0
    log_scale: true
    name: lookup_embedder.initialize_args.normal_.std
    type: range
  - bounds:
    - -1.0
    - -1.0e-05
    name: lookup_embedder.initialize_args.uniform_.a
    type: range
  - is_ordered: true
    name: lookup_embedder.regularize
    type: choice
    values:
    - ''
    - l3
    - l2
    - l1
  - bounds:
    - 1.0e-20
    - 0.1
    log_scale: true
    name: complex.entity_embedder.regularize_weight
    type: range
  - bounds:
    - 1.0e-20
    - 0.1
    log_scale: true
    name: complex.relation_embedder.regularize_weight
    type: range
  - bounds:
    - -0.5
    - 0.5
    name: complex.entity_embedder.dropout
    type: range
  - bounds:
    - -0.5
    - 0.5
    name: complex.relation_embedder.dropout
    type: range
  - bounds:
    - 1
    - 10000
    log_scale: false
    name: negative_sampling.num_samples.s
    type: range
  - bounds:
    - 1
    - 10000
    log_scale: false
    name: negative_sampling.num_samples.o
    type: range
      

lookup_embedder:
  class_name: LookupEmbedder
  dim: 128
  initialize_args:
    normal_:
      mean: 0.0
    xavier_normal_:
      gain: 1.0
    xavier_uniform_:
      gain: 1.0
  regularize_args:
    weighted: true
    p: 2
  sparse: true

